// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MECHANIC
  OWNER
}

enum DocumentType {
  SOAT
  TECNOMECANICO
  TARJETA_PROPIEDAD
  REVISION_GASES
  POLIZA_SEGURO
  LICENCIA_TRANSITO
  OTHER
}

enum MaintenanceStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Enum para el estado del traspaso
enum TransferStatus {
  PENDING_SELLER_DOCUMENTS
  PENDING_BUYER_ACCEPTANCE
  PENDING_ADMIN_APPROVAL
  COMPLETED
  CANCELLED
  REJECTED
}

// User and related auth models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  phone         String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(OWNER)
  isApproved    Boolean   @default(false)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  accounts             Account[]
  sessions             Session[]
  loginAttempts        LoginAttempt[]
  authLogs             AuthLog[]
  ownedCars            Car[]              @relation("CarOwner")
  // Corrected: Explicitly defined relation for mechanics
  managedMaintenances  MaintenanceLog[]   @relation("MechanicMaintenance")
  chatSessions         UserChatSession[]  @relation("UserChats")
  sentMessages         ChatMessage[]      @relation("MessageSender")
  // transfers
  profile              UserProfile?
  sellingTransfers     VehicleTransfer[]  @relation("SellerTransfers")
  buyingTransfers      VehicleTransfer[]  @relation("BuyerTransfers")
  approvedTransfers    VehicleTransfer[]  @relation("AdminApprovals")
  uploadedTransferDocs TransferDocument[] @relation("DocumentUploader")
  verifiedTransferDocs TransferDocument[] @relation("DocumentVerifier")

  @@map("users")
}

// Modelo para los datos de perfil extendidos
model UserProfile {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @unique @db.ObjectId
  documentType     String? // CC, CE, TI, etc.
  documentNumber   String?   @unique
  address          String?
  city             String?
  department       String?
  country          String    @default("Colombia")
  birthDate        DateTime?
  emergencyContact String?
  emergencyPhone   String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relationships
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  sellerTransfers VehicleTransfer[] @relation("SellerProfile")
  buyerTransfers  VehicleTransfer[] @relation("BuyerProfile")

  @@map("user_profiles")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Corrected: Removed the `@unique` constraint on email
model LoginAttempt {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String
  attempts    Int      @default(1)
  lastAttempt DateTime @default(now())
  lockedUntil DateTime
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId

  @@unique([email])
  @@map("login_attempts")
}

model AuthLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  success   Boolean
  ipAddress String?
  userAgent String?
  userId    String?  @db.ObjectId
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("auth_logs")
}

// Modelo principal para el traspaso
model VehicleTransfer {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  carId             String         @db.ObjectId
  sellerId          String         @db.ObjectId
  sellerProfileId   String         @db.ObjectId
  buyerId           String         @db.ObjectId
  buyerProfileId    String         @db.ObjectId
  status            TransferStatus @default(PENDING_SELLER_DOCUMENTS)
  salePrice         Float?
  transferDate      DateTime?
  completionDate    DateTime?
  notes             String?
  adminNotes        String?
  approvedByAdminId String?        @db.ObjectId
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relationships
  car             Car                @relation(fields: [carId], references: [id])
  seller          User               @relation("SellerTransfers", fields: [sellerId], references: [id])
  buyer           User               @relation("BuyerTransfers", fields: [buyerId], references: [id])
  sellerProfile   UserProfile        @relation("SellerProfile", fields: [sellerProfileId], references: [id])
  buyerProfile    UserProfile        @relation("BuyerProfile", fields: [buyerProfileId], references: [id])
  approvedByAdmin User?              @relation("AdminApprovals", fields: [approvedByAdminId], references: [id])
  documents       TransferDocument[]

  @@map("vehicle_transfers")
}

// Core business models
model Car {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  vin          String   @unique
  qrCode       String?  @unique
  brand        String
  model        String
  year         Int
  color        String
  licensePlate String   @unique
  ownerId      String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  owner           User              @relation("CarOwner", fields: [ownerId], references: [id])
  maintenanceLogs MaintenanceLog[]
  documents       Document[]
  chatSessions    ChatSession[]
  transfers       VehicleTransfer[]

  @@map("cars")
}

model MaintenanceLog {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  carId         String            @db.ObjectId
  mechanicId    String            @db.ObjectId
  description   String
  laborCost     Float
  totalCost     Float
  status        MaintenanceStatus @default(IN_PROGRESS)
  startDate     DateTime          @default(now())
  estimatedTime Int?
  completedDate DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relationships
  car       Car        @relation(fields: [carId], references: [id])
  mechanic  User       @relation("MechanicMaintenance", fields: [mechanicId], references: [id])
  invoice   Invoice?
  usedParts UsedPart[]

  @@map("maintenance_logs")
}

model Part {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  stock       Int
  photoUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  usedParts UsedPart[]

  @@map("parts")
}

model UsedPart {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  maintenanceLogId String @db.ObjectId
  partId           String @db.ObjectId
  quantity         Int
  unitPrice        Float

  // Relationships
  maintenanceLog MaintenanceLog @relation(fields: [maintenanceLogId], references: [id])
  part           Part           @relation(fields: [partId], references: [id])

  @@map("used_parts")
}

model Invoice {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  maintenanceLogId String   @unique @db.ObjectId
  subtotal         Float
  laborCost        Float
  totalCost        Float
  mechanicShare    Float
  adminShare       Float
  createdAt        DateTime @default(now())

  // Relationships
  maintenanceLog MaintenanceLog @relation(fields: [maintenanceLogId], references: [id])

  @@map("invoices")
}

model Document {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  carId      String       @db.ObjectId
  name       String
  docType    DocumentType
  fileUrl    String
  fileName   String
  expiryDate DateTime?
  uploadedAt DateTime     @default(now())

  // Relationships
  car Car @relation(fields: [carId], references: [id])

  @@map("documents")
}

// Chat models
model ChatSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  carId     String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  car              Car               @relation(fields: [carId], references: [id])
  userChatSessions UserChatSession[]
  messages         ChatMessage[]

  @@map("chat_sessions")
}

model UserChatSession {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  chatSessionId String      @db.ObjectId
  user          User        @relation("UserChats", fields: [userId], references: [id])
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id])

  @@unique([userId, chatSessionId])
  @@map("user_chat_sessions")
}

model ChatMessage {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  chatSessionId String   @db.ObjectId
  senderId      String   @db.ObjectId
  message       String
  sentAt        DateTime @default(now())

  // Relationships
  chatSession ChatSession @relation(fields: [chatSessionId], references: [id])
  sender      User        @relation("MessageSender", fields: [senderId], references: [id])

  @@map("chat_messages")
}

// Documentos requeridos para el traspaso
model TransferDocument {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  transferId   String   @db.ObjectId
  documentType String // "seller_id", "buyer_id", "sale_contract", etc.
  fileName     String
  fileUrl      String
  uploadedBy   String   @db.ObjectId
  isRequired   Boolean  @default(true)
  isVerified   Boolean  @default(false)
  verifiedBy   String?  @db.ObjectId
  uploadedAt   DateTime @default(now())

  // Relationships
  transfer VehicleTransfer @relation(fields: [transferId], references: [id])
  uploader User            @relation("DocumentUploader", fields: [uploadedBy], references: [id])
  verifier User?           @relation("DocumentVerifier", fields: [verifiedBy], references: [id])

  @@map("transfer_documents")
}
